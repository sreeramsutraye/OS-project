#include<stdio.h>
#include<stdlib.h>
#include<dos.h>
#include<unistd.h>
struct process
{
	int priority;
	int bursttime;
	int pid;
	int waitingtime;
	int turnaroundtime;
	int remainingtime;
	int arrivaltime;
};
void getinput();
void calWT(struct process *q,int);
void calTT(struct process *q,int);
void roundrobin();
void FCFS();
void priosorting();
void printq(struct process *q,int size);
void printqI(struct process);
void printq(struct process *,int);

int q1n=0,q2n=0,q3n=0,n=0; 
struct process *q1,*q2,*q3;
int timequantum = 4;
void getinput()
{
	printf("\n Total Number of Process:\t");
	scanf("%d",&n);
	q1 = (struct process *)malloc(n*sizeof(struct process));
	q2 = (struct process *)malloc(n*sizeof(struct process));
	q3 = (struct process *)malloc(n*sizeof(struct process));
	for(int i=0;i<n;i++)
	{
		struct process p;
		printf("\n\t\tProcess %d\n",i+1);
		p.arrivaltime = (rand())%(n+1);				
		printf("PId:\t");
		scanf("%d",&p.pid);
		printf("Priority (1-9):\t");
		scanf("%d",&p.priority);
		printf("\nBurst Time: %d\t",p.bursttime);
		scanf("%d",&p.bursttime);
		p.remainingtime = p.bursttime;
		if(p.priority>0 && p.priority<=3)
		{
			q1[q1n++]  = p;
			printf("\nEntering 1st queue\n");
		}
		else if(p.priority>3 && p.priority<=6)
		{
			q2[q2n++] = p;
			printf("\nEntering 2nd queue\n");

		}
		else
		{
			q3[q3n++] = p;
			printf("\nEntering 3rd queue\n");

		}		
	}
}
void printq(struct process *q,int size){	
	calWT(q,size);
	calTT(q,size);
	printf("\nPId\t\tPriority\t\tBurst Time\t\tWaiting Time\t\tTurnAround Time\t\tArrival");
	for(int i=0;i<size;i++){
		printqI(q[i]);
	}
	printf("\n\n");
}
void printqI(struct process p){
	printf("\n%d\t%d\t\t%d\t\t%d\t\t%d\t%d",p.pid,p.priority,p.bursttime,p.waitingtime,p.turnaroundtime,p.arrivaltime);
}
void calWT(struct process *q,int s)
{
	q[0].waitingtime = 0;
	for(int i=1;i<s;i++)
	{
		q[i].waitingtime = q[i-1].waitingtime + q[i-1].bursttime;
	}
}
void calTT(struct process *q,int s){
	q[0].waitingtime = 0;
	for(int i=0;i<s;i++)
	{
		q[i].turnaroundtime = q[i].waitingtime + q[i].bursttime;
	}
}
void roundrobinalgo(struct process *q,int s)
{
	int time=0,i=0,remain=s,f=0,waittime=0,tattime=0,totaltimes=0;
	for(time=0,i=0;remain!=0;)
	{
		struct process p = q[i];
		if(p.remainingtime<=timequantum && p.remainingtime>0)
		{
			time += p.remainingtime;
			p.remainingtime = 0;
			f = 1;
		}
		else if(p.remainingtime>timequantum)
		{
			p.remainingtime -= timequantum;
			time += timequantum;
		}
		if(p.remainingtime==0 && f==1)
		{
			remain--;
			printf("\n%d\t\t%d\t\t\t%d\t\t\t%d\t\t\t%d",p.pid,p.priority,p.bursttime,p.waitingtime,p.turnaroundtime);
			waittime += time -p.arrivaltime - p.bursttime;
			tattime += time -p.arrivaltime;
			f = 0;
		}
		
		if(i==remain-1)
		{
			i=0;
		}
		else if(q[i+1].arrivaltime<time)
		{
			i++;
		}
		else
		{
			i=0;
		}

		q[i] = p;
	}
	printf("\nAverage Waiting Time= %f\n",waittime*1.0/n); 
	printf("\nAverage Turnaround Time = %f\n",tattime*1.0/n); 	
}
void roundrobin()
{
	printf("\n\t\tRound Robin\t");

	printf("\nPId\t\tPriority\t\tBurst Time\t\tWaiting Time\t\tTurnAround Time");
	calWT(q3,q3n);
	calTT(q3,q3n);
	roundrobinalgo(q3,q3n);
}
void priosortingalgorithm(struct process *q,int size)
{
	for(int i=0;i<size;i++)
	{
		for(int j=0;j<size;j++)
		{
			if(q[j].priority>q[i].priority)
			{
				struct process l2 = q[i];
				q[i] = q[j];
				q[j] = l2;
			}
		}
	}
}
void priosorting()
{
	printf("\n\t\tPriority Sorting\t");
	priosortingalgorithm(q2,q2n);
	printq(q2,q2n);
}
void FCFSalgorithm(struct process *q,int size)
{
	for(int i=0;i<size;i++)
	{
		for(int j=0;j<size;j++)
		{
			if(q[j].arrivaltime>q[i].arrivaltime)
			{
				struct process l1 = q[i];
				q[i] = q[j];
				q[j] = l1;
			}
		}
	}
}
void FCFS()
{
	printf("\n\t\tFirst Come First Serve\t");
	FCFSalgorithm(q1,q1n);
	printq(q1,q1n);
}
int main()
{
	getinput();
	int k=1;
	while(n>0)
	{
		switch(k)
		{
			case 3:
				roundrobin();
				break;
			case 2:
				priosorting();
				break;
			case 1:
				FCFS();
				break;
		}
		k++;
		sleep(10);
	}
	printf("\n\n");
}
